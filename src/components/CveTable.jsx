import React, { useState } from "react";
import "../styles/CveTable.css";
import CveFormModal from "./CveFormModal";
import DeleteModal from "./DeleteModal";

const CveTable = () => {
  const [cveRecords, setCveRecords] = useState([
    {
      id: 1,
      cveId: "CVE-2023-0001",
      severity: "High",
      cvss: 8.2,
      affectedPackages: "Package A",
      cweId: "CWE-79",
    },
  ]);

  const [isModalOpen, setIsModalOpen] = useState(false);
  const [editRecord, setEditRecord] = useState(null);
  const [isDeleteModalOpen, setIsDeleteModalOpen] = useState(false);
  const [recordToDelete, setRecordToDelete] = useState(null);
  const [sortBy, setSortBy] = useState("cveId"); // Default sorting by CVE-ID
  const [filterText, setFilterText] = useState(""); // For filtering records

  const handleAddCve = (newRecord) => {
    setCveRecords([...cveRecords, { ...newRecord, id: cveRecords.length + 1 }]);
  };

  const handleEditCve = (record) => {
    setEditRecord(record);
    setIsModalOpen(true);
  };

  const handleSaveCve = (updatedRecord) => {
    if (editRecord) {
      // Update existing record
      setCveRecords((prevRecords) =>
        prevRecords.map((record) =>
          record.cveId === editRecord.cveId ? { ...updatedRecord, id: record.id } : record
        )
      );
      setEditRecord(null); // Reset editRecord
    } else {
      handleAddCve(updatedRecord); // Add new record
    }
  };

  const handleDeleteCve = (record) => {
    setRecordToDelete(record);
    setIsDeleteModalOpen(true);
  };

  const confirmDelete = () => {
    setCveRecords(cveRecords.filter((record) => record.id !== recordToDelete.id));
    setIsDeleteModalOpen(false);
    setRecordToDelete(null);
  };

  const sortCveRecords = (records) => {
    return [...records].sort((a, b) => {
      if (a[sortBy] < b[sortBy]) return -1;
      if (a[sortBy] > b[sortBy]) return 1;
      return 0;
    });
  };

  const filterCveRecords = (records) => {
    return records.filter((record) =>
      record.cveId.toLowerCase().includes(filterText.toLowerCase())
    );
  };

  return (
    <div className="cve-table-container">
      <h1>CVE Records</h1>
      <button onClick={() => setIsModalOpen(true)}>Add New CVE</button>

      <div className="filter-sort-controls">
        <input
          type="text"
          placeholder="Filter by CVE-ID"
          value={filterText}
          onChange={(e) => setFilterText(e.target.value)}
        />
        <select value={sortBy} onChange={(e) => setSortBy(e.target.value)}>
          <option value="cveId">Sort by CVE-ID</option>
          <option value="severity">Sort by Severity</option>
          <option value="cvss">Sort by CVSS</option>
          <option value="affectedPackages">Sort by Affected Packages</option>
          <option value="cweId">Sort by CWE-ID</option>
        </select>
      </div>

      <table className="cve-table">
        <thead>
          <tr>
            <th>CVE-ID</th>
            <th>Severity</th>
            <th>CVSS</th>
            <th>Affected Packages</th>
            <th>CWE-ID</th>
            <th>Actions</th>
          </tr>
        </thead>
        <tbody>
          {sortCveRecords(filterCveRecords(cveRecords)).map((record) => (
            <tr key={record.id}>
              <td>{record.cveId}</td>
              <td>{record.severity}</td>
              <td>{record.cvss}</td>
              <td>{record.affectedPackages}</td>
              <td>{record.cweId}</td>
              <td>
                <button onClick={() => handleEditCve(record)}>Edit</button>
                <button onClick={() => handleDeleteCve(record)}>Delete</button>
              </td>
            </tr>
          ))}
        </tbody>
      </table>

      {/* Add/Edit CVE Form Modal */}
      <CveFormModal
        isOpen={isModalOpen}
        onClose={() => {
          setIsModalOpen(false);
          setEditRecord(null); // Reset editRecord when closing
        }}
        onSave={handleSaveCve}
        editRecord={editRecord} // Pass the record to edit
      />

      {/* Delete Confirmation Modal */}
      <DeleteModal
        isOpen={isDeleteModalOpen}
        onClose={() => setIsDeleteModalOpen(false)}
        onConfirm={confirmDelete}
      />
    </div>
  );
};

export default CveTable;
